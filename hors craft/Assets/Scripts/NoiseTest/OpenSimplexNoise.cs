// DecompilerFi decompiler from Assembly-CSharp.dll class: NoiseTest.OpenSimplexNoise
using System;

namespace NoiseTest
{
	public class OpenSimplexNoise
	{
		private class Contribution2
		{
			public double dx;

			public double dy;

			public int xsb;

			public int ysb;

			public Contribution2 Next;

			public Contribution2(double multiplier, int xsb, int ysb)
			{
				dx = (double)(-xsb) - multiplier * 0.366025403784439;
				dy = (double)(-ysb) - multiplier * 0.366025403784439;
				this.xsb = xsb;
				this.ysb = ysb;
			}
		}

		private class Contribution3
		{
			public double dx;

			public double dy;

			public double dz;

			public int xsb;

			public int ysb;

			public int zsb;

			public Contribution3 Next;

			public Contribution3(double multiplier, int xsb, int ysb, int zsb)
			{
				dx = (double)(-xsb) - multiplier * 0.33333333333333331;
				dy = (double)(-ysb) - multiplier * 0.33333333333333331;
				dz = (double)(-zsb) - multiplier * 0.33333333333333331;
				this.xsb = xsb;
				this.ysb = ysb;
				this.zsb = zsb;
			}
		}

		private class Contribution4
		{
			public double dx;

			public double dy;

			public double dz;

			public double dw;

			public int xsb;

			public int ysb;

			public int zsb;

			public int wsb;

			public Contribution4 Next;

			public Contribution4(double multiplier, int xsb, int ysb, int zsb, int wsb)
			{
				dx = (double)(-xsb) - multiplier * 0.309016994374947;
				dy = (double)(-ysb) - multiplier * 0.309016994374947;
				dz = (double)(-zsb) - multiplier * 0.309016994374947;
				dw = (double)(-wsb) - multiplier * 0.309016994374947;
				this.xsb = xsb;
				this.ysb = ysb;
				this.zsb = zsb;
				this.wsb = wsb;
			}
		}

		private const double STRETCH_2D = -0.211324865405187;

		private const double STRETCH_3D = -0.16666666666666666;

		private const double STRETCH_4D = -0.138196601125011;

		private const double SQUISH_2D = 0.366025403784439;

		private const double SQUISH_3D = 0.33333333333333331;

		private const double SQUISH_4D = 0.309016994374947;

		private const double NORM_2D = 0.021276595744680851;

		private const double NORM_3D = 0.0097087378640776691;

		private const double NORM_4D = 0.033333333333333333;

		private byte[] perm;

		private byte[] perm2D;

		private byte[] perm3D;

		private byte[] perm4D;

		private static double[] gradients2D;

		private static double[] gradients3D;

		private static double[] gradients4D;

		private static Contribution2[] lookup2D;

		private static Contribution3[] lookup3D;

		private static Contribution4[] lookup4D;

		static OpenSimplexNoise()
		{
			gradients2D = new double[16]
			{
				5.0,
				2.0,
				2.0,
				5.0,
				-5.0,
				2.0,
				-2.0,
				5.0,
				5.0,
				-2.0,
				2.0,
				-5.0,
				-5.0,
				-2.0,
				-2.0,
				-5.0
			};
			gradients3D = new double[72]
			{
				-11.0,
				4.0,
				4.0,
				-4.0,
				11.0,
				4.0,
				-4.0,
				4.0,
				11.0,
				11.0,
				4.0,
				4.0,
				4.0,
				11.0,
				4.0,
				4.0,
				4.0,
				11.0,
				-11.0,
				-4.0,
				4.0,
				-4.0,
				-11.0,
				4.0,
				-4.0,
				-4.0,
				11.0,
				11.0,
				-4.0,
				4.0,
				4.0,
				-11.0,
				4.0,
				4.0,
				-4.0,
				11.0,
				-11.0,
				4.0,
				-4.0,
				-4.0,
				11.0,
				-4.0,
				-4.0,
				4.0,
				-11.0,
				11.0,
				4.0,
				-4.0,
				4.0,
				11.0,
				-4.0,
				4.0,
				4.0,
				-11.0,
				-11.0,
				-4.0,
				-4.0,
				-4.0,
				-11.0,
				-4.0,
				-4.0,
				-4.0,
				-11.0,
				11.0,
				-4.0,
				-4.0,
				4.0,
				-11.0,
				-4.0,
				4.0,
				-4.0,
				-11.0
			};
			gradients4D = new double[256]
			{
				3.0,
				1.0,
				1.0,
				1.0,
				1.0,
				3.0,
				1.0,
				1.0,
				1.0,
				1.0,
				3.0,
				1.0,
				1.0,
				1.0,
				1.0,
				3.0,
				-3.0,
				1.0,
				1.0,
				1.0,
				-1.0,
				3.0,
				1.0,
				1.0,
				-1.0,
				1.0,
				3.0,
				1.0,
				-1.0,
				1.0,
				1.0,
				3.0,
				3.0,
				-1.0,
				1.0,
				1.0,
				1.0,
				-3.0,
				1.0,
				1.0,
				1.0,
				-1.0,
				3.0,
				1.0,
				1.0,
				-1.0,
				1.0,
				3.0,
				-3.0,
				-1.0,
				1.0,
				1.0,
				-1.0,
				-3.0,
				1.0,
				1.0,
				-1.0,
				-1.0,
				3.0,
				1.0,
				-1.0,
				-1.0,
				1.0,
				3.0,
				3.0,
				1.0,
				-1.0,
				1.0,
				1.0,
				3.0,
				-1.0,
				1.0,
				1.0,
				1.0,
				-3.0,
				1.0,
				1.0,
				1.0,
				-1.0,
				3.0,
				-3.0,
				1.0,
				-1.0,
				1.0,
				-1.0,
				3.0,
				-1.0,
				1.0,
				-1.0,
				1.0,
				-3.0,
				1.0,
				-1.0,
				1.0,
				-1.0,
				3.0,
				3.0,
				-1.0,
				-1.0,
				1.0,
				1.0,
				-3.0,
				-1.0,
				1.0,
				1.0,
				-1.0,
				-3.0,
				1.0,
				1.0,
				-1.0,
				-1.0,
				3.0,
				-3.0,
				-1.0,
				-1.0,
				1.0,
				-1.0,
				-3.0,
				-1.0,
				1.0,
				-1.0,
				-1.0,
				-3.0,
				1.0,
				-1.0,
				-1.0,
				-1.0,
				3.0,
				3.0,
				1.0,
				1.0,
				-1.0,
				1.0,
				3.0,
				1.0,
				-1.0,
				1.0,
				1.0,
				3.0,
				-1.0,
				1.0,
				1.0,
				1.0,
				-3.0,
				-3.0,
				1.0,
				1.0,
				-1.0,
				-1.0,
				3.0,
				1.0,
				-1.0,
				-1.0,
				1.0,
				3.0,
				-1.0,
				-1.0,
				1.0,
				1.0,
				-3.0,
				3.0,
				-1.0,
				1.0,
				-1.0,
				1.0,
				-3.0,
				1.0,
				-1.0,
				1.0,
				-1.0,
				3.0,
				-1.0,
				1.0,
				-1.0,
				1.0,
				-3.0,
				-3.0,
				-1.0,
				1.0,
				-1.0,
				-1.0,
				-3.0,
				1.0,
				-1.0,
				-1.0,
				-1.0,
				3.0,
				-1.0,
				-1.0,
				-1.0,
				1.0,
				-3.0,
				3.0,
				1.0,
				-1.0,
				-1.0,
				1.0,
				3.0,
				-1.0,
				-1.0,
				1.0,
				1.0,
				-3.0,
				-1.0,
				1.0,
				1.0,
				-1.0,
				-3.0,
				-3.0,
				1.0,
				-1.0,
				-1.0,
				-1.0,
				3.0,
				-1.0,
				-1.0,
				-1.0,
				1.0,
				-3.0,
				-1.0,
				-1.0,
				1.0,
				-1.0,
				-3.0,
				3.0,
				-1.0,
				-1.0,
				-1.0,
				1.0,
				-3.0,
				-1.0,
				-1.0,
				1.0,
				-1.0,
				-3.0,
				-1.0,
				1.0,
				-1.0,
				-1.0,
				-3.0,
				-3.0,
				-1.0,
				-1.0,
				-1.0,
				-1.0,
				-3.0,
				-1.0,
				-1.0,
				-1.0,
				-1.0,
				-3.0,
				-1.0,
				-1.0,
				-1.0,
				-1.0,
				-3.0
			};
			int[][] array = new int[2][]
			{
				new int[9]
				{
					1,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					0
				},
				new int[9]
				{
					1,
					1,
					0,
					1,
					0,
					1,
					2,
					1,
					1
				}
			};
			int[] array2 = new int[24]
			{
				0,
				0,
				1,
				-1,
				0,
				0,
				-1,
				1,
				0,
				2,
				1,
				1,
				1,
				2,
				2,
				0,
				1,
				2,
				0,
				2,
				1,
				0,
				0,
				0
			};
			int[] array3 = new int[24]
			{
				0,
				1,
				1,
				0,
				4,
				1,
				17,
				0,
				20,
				2,
				21,
				2,
				22,
				5,
				23,
				5,
				26,
				4,
				39,
				3,
				42,
				4,
				43,
				3
			};
			Contribution2[] array4 = new Contribution2[array2.Length / 4];
			for (int i = 0; i < array2.Length; i += 4)
			{
				int[] array5 = array[array2[i]];
				Contribution2 contribution = null;
				Contribution2 contribution2 = null;
				for (int j = 0; j < array5.Length; j += 3)
				{
					contribution2 = new Contribution2(array5[j], array5[j + 1], array5[j + 2]);
					if (contribution == null)
					{
						array4[i / 4] = contribution2;
					}
					else
					{
						contribution.Next = contribution2;
					}
					contribution = contribution2;
				}
				contribution2.Next = new Contribution2(array2[i + 1], array2[i + 2], array2[i + 3]);
			}
			lookup2D = new Contribution2[64];
			for (int k = 0; k < array3.Length; k += 2)
			{
				lookup2D[array3[k]] = array4[array3[k + 1]];
			}
			int[][] array6 = new int[3][]
			{
				new int[16]
				{
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					1
				},
				new int[16]
				{
					2,
					1,
					1,
					0,
					2,
					1,
					0,
					1,
					2,
					0,
					1,
					1,
					3,
					1,
					1,
					1
				},
				new int[24]
				{
					1,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					2,
					1,
					1,
					0,
					2,
					1,
					0,
					1,
					2,
					0,
					1,
					1
				}
			};
			int[] array7 = new int[216]
			{
				0,
				0,
				1,
				-1,
				0,
				0,
				1,
				0,
				-1,
				0,
				0,
				-1,
				1,
				0,
				0,
				0,
				1,
				-1,
				0,
				0,
				-1,
				0,
				1,
				0,
				0,
				-1,
				1,
				0,
				2,
				1,
				1,
				0,
				1,
				1,
				1,
				-1,
				0,
				2,
				1,
				0,
				1,
				1,
				1,
				-1,
				1,
				0,
				2,
				0,
				1,
				1,
				1,
				-1,
				1,
				1,
				1,
				3,
				2,
				1,
				0,
				3,
				1,
				2,
				0,
				1,
				3,
				2,
				0,
				1,
				3,
				1,
				0,
				2,
				1,
				3,
				0,
				2,
				1,
				3,
				0,
				1,
				2,
				1,
				1,
				1,
				0,
				0,
				2,
				2,
				0,
				0,
				1,
				1,
				0,
				1,
				0,
				2,
				0,
				2,
				0,
				1,
				1,
				0,
				0,
				1,
				2,
				0,
				0,
				2,
				2,
				0,
				0,
				0,
				0,
				1,
				1,
				-1,
				1,
				2,
				0,
				0,
				0,
				0,
				1,
				-1,
				1,
				1,
				2,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				-1,
				2,
				3,
				1,
				1,
				1,
				2,
				0,
				0,
				2,
				2,
				3,
				1,
				1,
				1,
				2,
				2,
				0,
				0,
				2,
				3,
				1,
				1,
				1,
				2,
				0,
				2,
				0,
				2,
				1,
				1,
				-1,
				1,
				2,
				0,
				0,
				2,
				2,
				1,
				1,
				-1,
				1,
				2,
				2,
				0,
				0,
				2,
				1,
				-1,
				1,
				1,
				2,
				0,
				0,
				2,
				2,
				1,
				-1,
				1,
				1,
				2,
				0,
				2,
				0,
				2,
				1,
				1,
				1,
				-1,
				2,
				2,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				2,
				0,
				2,
				0
			};
			int[] array8 = new int[144]
			{
				0,
				2,
				1,
				1,
				2,
				2,
				5,
				1,
				6,
				0,
				7,
				0,
				32,
				2,
				34,
				2,
				129,
				1,
				133,
				1,
				160,
				5,
				161,
				5,
				518,
				0,
				519,
				0,
				546,
				4,
				550,
				4,
				645,
				3,
				647,
				3,
				672,
				5,
				673,
				5,
				674,
				4,
				677,
				3,
				678,
				4,
				679,
				3,
				680,
				13,
				681,
				13,
				682,
				12,
				685,
				14,
				686,
				12,
				687,
				14,
				712,
				20,
				714,
				18,
				809,
				21,
				813,
				23,
				840,
				20,
				841,
				21,
				1198,
				19,
				1199,
				22,
				1226,
				18,
				1230,
				19,
				1325,
				23,
				1327,
				22,
				1352,
				15,
				1353,
				17,
				1354,
				15,
				1357,
				17,
				1358,
				16,
				1359,
				16,
				1360,
				11,
				1361,
				10,
				1362,
				11,
				1365,
				10,
				1366,
				9,
				1367,
				9,
				1392,
				11,
				1394,
				11,
				1489,
				10,
				1493,
				10,
				1520,
				8,
				1521,
				8,
				1878,
				9,
				1879,
				9,
				1906,
				7,
				1910,
				7,
				2005,
				6,
				2007,
				6,
				2032,
				8,
				2033,
				8,
				2034,
				7,
				2037,
				6,
				2038,
				7,
				2039,
				6
			};
			Contribution3[] array9 = new Contribution3[array7.Length / 9];
			for (int l = 0; l < array7.Length; l += 9)
			{
				int[] array10 = array6[array7[l]];
				Contribution3 contribution3 = null;
				Contribution3 contribution4 = null;
				for (int m = 0; m < array10.Length; m += 4)
				{
					contribution4 = new Contribution3(array10[m], array10[m + 1], array10[m + 2], array10[m + 3]);
					if (contribution3 == null)
					{
						array9[l / 9] = contribution4;
					}
					else
					{
						contribution3.Next = contribution4;
					}
					contribution3 = contribution4;
				}
				contribution4.Next = new Contribution3(array7[l + 1], array7[l + 2], array7[l + 3], array7[l + 4]);
				contribution4.Next.Next = new Contribution3(array7[l + 5], array7[l + 6], array7[l + 7], array7[l + 8]);
			}
			lookup3D = new Contribution3[2048];
			for (int n = 0; n < array8.Length; n += 2)
			{
				lookup3D[array8[n]] = array9[array8[n + 1]];
			}
			int[][] array11 = new int[4][]
			{
				new int[25]
				{
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1
				},
				new int[25]
				{
					3,
					1,
					1,
					1,
					0,
					3,
					1,
					1,
					0,
					1,
					3,
					1,
					0,
					1,
					1,
					3,
					0,
					1,
					1,
					1,
					4,
					1,
					1,
					1,
					1
				},
				new int[50]
				{
					1,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					2,
					1,
					1,
					0,
					0,
					2,
					1,
					0,
					1,
					0,
					2,
					1,
					0,
					0,
					1,
					2,
					0,
					1,
					1,
					0,
					2,
					0,
					1,
					0,
					1,
					2,
					0,
					0,
					1,
					1
				},
				new int[50]
				{
					3,
					1,
					1,
					1,
					0,
					3,
					1,
					1,
					0,
					1,
					3,
					1,
					0,
					1,
					1,
					3,
					0,
					1,
					1,
					1,
					2,
					1,
					1,
					0,
					0,
					2,
					1,
					0,
					1,
					0,
					2,
					1,
					0,
					0,
					1,
					2,
					0,
					1,
					1,
					0,
					2,
					0,
					1,
					0,
					1,
					2,
					0,
					0,
					1,
					1
				}
			};
			int[] array12 = new int[1280]
			{
				0,
				0,
				1,
				-1,
				0,
				0,
				0,
				1,
				0,
				-1,
				0,
				0,
				1,
				0,
				0,
				-1,
				0,
				0,
				-1,
				1,
				0,
				0,
				0,
				0,
				1,
				-1,
				0,
				0,
				0,
				1,
				0,
				-1,
				0,
				0,
				-1,
				0,
				1,
				0,
				0,
				0,
				-1,
				1,
				0,
				0,
				0,
				0,
				1,
				-1,
				0,
				0,
				-1,
				0,
				0,
				1,
				0,
				0,
				-1,
				0,
				1,
				0,
				0,
				0,
				-1,
				1,
				0,
				2,
				1,
				1,
				0,
				0,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				0,
				2,
				1,
				0,
				1,
				0,
				1,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				0,
				2,
				0,
				1,
				1,
				0,
				1,
				-1,
				1,
				1,
				0,
				1,
				0,
				1,
				1,
				-1,
				0,
				2,
				1,
				0,
				0,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				0,
				2,
				0,
				1,
				0,
				1,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				1,
				0,
				2,
				0,
				0,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				1,
				1,
				4,
				2,
				1,
				1,
				0,
				4,
				1,
				2,
				1,
				0,
				4,
				1,
				1,
				2,
				0,
				1,
				4,
				2,
				1,
				0,
				1,
				4,
				1,
				2,
				0,
				1,
				4,
				1,
				1,
				0,
				2,
				1,
				4,
				2,
				0,
				1,
				1,
				4,
				1,
				0,
				2,
				1,
				4,
				1,
				0,
				1,
				2,
				1,
				4,
				0,
				2,
				1,
				1,
				4,
				0,
				1,
				2,
				1,
				4,
				0,
				1,
				1,
				2,
				1,
				2,
				1,
				1,
				0,
				0,
				3,
				2,
				1,
				0,
				0,
				3,
				1,
				2,
				0,
				0,
				1,
				2,
				1,
				0,
				1,
				0,
				3,
				2,
				0,
				1,
				0,
				3,
				1,
				0,
				2,
				0,
				1,
				2,
				0,
				1,
				1,
				0,
				3,
				0,
				2,
				1,
				0,
				3,
				0,
				1,
				2,
				0,
				1,
				2,
				1,
				0,
				0,
				1,
				3,
				2,
				0,
				0,
				1,
				3,
				1,
				0,
				0,
				2,
				1,
				2,
				0,
				1,
				0,
				1,
				3,
				0,
				2,
				0,
				1,
				3,
				0,
				1,
				0,
				2,
				1,
				2,
				0,
				0,
				1,
				1,
				3,
				0,
				0,
				2,
				1,
				3,
				0,
				0,
				1,
				2,
				2,
				3,
				1,
				1,
				1,
				0,
				2,
				1,
				1,
				1,
				-1,
				2,
				2,
				0,
				0,
				0,
				2,
				3,
				1,
				1,
				0,
				1,
				2,
				1,
				1,
				-1,
				1,
				2,
				2,
				0,
				0,
				0,
				2,
				3,
				1,
				0,
				1,
				1,
				2,
				1,
				-1,
				1,
				1,
				2,
				2,
				0,
				0,
				0,
				2,
				3,
				1,
				1,
				1,
				0,
				2,
				1,
				1,
				1,
				-1,
				2,
				0,
				2,
				0,
				0,
				2,
				3,
				1,
				1,
				0,
				1,
				2,
				1,
				1,
				-1,
				1,
				2,
				0,
				2,
				0,
				0,
				2,
				3,
				0,
				1,
				1,
				1,
				2,
				-1,
				1,
				1,
				1,
				2,
				0,
				2,
				0,
				0,
				2,
				3,
				1,
				1,
				1,
				0,
				2,
				1,
				1,
				1,
				-1,
				2,
				0,
				0,
				2,
				0,
				2,
				3,
				1,
				0,
				1,
				1,
				2,
				1,
				-1,
				1,
				1,
				2,
				0,
				0,
				2,
				0,
				2,
				3,
				0,
				1,
				1,
				1,
				2,
				-1,
				1,
				1,
				1,
				2,
				0,
				0,
				2,
				0,
				2,
				3,
				1,
				1,
				0,
				1,
				2,
				1,
				1,
				-1,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				3,
				1,
				0,
				1,
				1,
				2,
				1,
				-1,
				1,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				3,
				0,
				1,
				1,
				1,
				2,
				-1,
				1,
				1,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				-1,
				1,
				1,
				0,
				1,
				0,
				1,
				1,
				-1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				1,
				0,
				0,
				0,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				2,
				0,
				2,
				0,
				0,
				2,
				1,
				-1,
				1,
				1,
				0,
				1,
				0,
				1,
				1,
				-1,
				2,
				0,
				2,
				0,
				0,
				2,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				1,
				2,
				0,
				2,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				2,
				0,
				0,
				2,
				0,
				2,
				1,
				-1,
				1,
				1,
				0,
				1,
				0,
				1,
				1,
				-1,
				2,
				0,
				0,
				2,
				0,
				2,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				1,
				2,
				0,
				0,
				2,
				0,
				2,
				1,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				1,
				-1,
				1,
				0,
				1,
				1,
				0,
				1,
				-1,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				1,
				-1,
				0,
				1,
				1,
				1,
				0,
				-1,
				1,
				1,
				2,
				0,
				0,
				0,
				2,
				3,
				1,
				1,
				0,
				0,
				0,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				1,
				0,
				1,
				0,
				0,
				2,
				0,
				2,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				1,
				0,
				0,
				1,
				0,
				2,
				0,
				0,
				2,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				1,
				1,
				0,
				0,
				0,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				3,
				1,
				0,
				1,
				0,
				0,
				2,
				0,
				2,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				3,
				1,
				0,
				0,
				0,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				1,
				1,
				-1,
				1,
				3,
				1,
				1,
				0,
				0,
				0,
				2,
				2,
				0,
				0,
				0,
				2,
				1,
				-1,
				1,
				1,
				3,
				1,
				0,
				0,
				1,
				0,
				2,
				0,
				0,
				2,
				0,
				2,
				1,
				-1,
				1,
				1,
				3,
				1,
				0,
				0,
				0,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				1,
				-1,
				1,
				1,
				3,
				1,
				0,
				1,
				0,
				0,
				2,
				0,
				2,
				0,
				0,
				2,
				-1,
				1,
				1,
				1,
				3,
				1,
				0,
				0,
				1,
				0,
				2,
				0,
				0,
				2,
				0,
				2,
				-1,
				1,
				1,
				1,
				3,
				1,
				0,
				0,
				0,
				1,
				2,
				0,
				0,
				0,
				2,
				2,
				-1,
				1,
				1,
				1,
				3,
				3,
				2,
				1,
				0,
				0,
				3,
				1,
				2,
				0,
				0,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				2,
				0,
				1,
				0,
				3,
				1,
				0,
				2,
				0,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				0,
				2,
				1,
				0,
				3,
				0,
				1,
				2,
				0,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				2,
				0,
				0,
				1,
				3,
				1,
				0,
				0,
				2,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				0,
				2,
				0,
				1,
				3,
				0,
				1,
				0,
				2,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				0,
				0,
				2,
				1,
				3,
				0,
				0,
				1,
				2,
				4,
				1,
				1,
				1,
				1,
				3,
				3,
				2,
				1,
				0,
				0,
				3,
				1,
				2,
				0,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				3,
				2,
				0,
				1,
				0,
				3,
				1,
				0,
				2,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				3,
				0,
				2,
				1,
				0,
				3,
				0,
				1,
				2,
				0,
				2,
				1,
				1,
				1,
				-1,
				3,
				3,
				2,
				1,
				0,
				0,
				3,
				1,
				2,
				0,
				0,
				2,
				1,
				1,
				-1,
				1,
				3,
				3,
				2,
				0,
				0,
				1,
				3,
				1,
				0,
				0,
				2,
				2,
				1,
				1,
				-1,
				1,
				3,
				3,
				0,
				2,
				0,
				1,
				3,
				0,
				1,
				0,
				2,
				2,
				1,
				1,
				-1,
				1,
				3,
				3,
				2,
				0,
				1,
				0,
				3,
				1,
				0,
				2,
				0,
				2,
				1,
				-1,
				1,
				1,
				3,
				3,
				2,
				0,
				0,
				1,
				3,
				1,
				0,
				0,
				2,
				2,
				1,
				-1,
				1,
				1,
				3,
				3,
				0,
				0,
				2,
				1,
				3,
				0,
				0,
				1,
				2,
				2,
				1,
				-1,
				1,
				1,
				3,
				3,
				0,
				2,
				1,
				0,
				3,
				0,
				1,
				2,
				0,
				2,
				-1,
				1,
				1,
				1,
				3,
				3,
				0,
				2,
				0,
				1,
				3,
				0,
				1,
				0,
				2,
				2,
				-1,
				1,
				1,
				1,
				3,
				3,
				0,
				0,
				2,
				1,
				3,
				0,
				0,
				1,
				2,
				2,
				-1,
				1,
				1,
				1
			};
			int[] array13 = new int[1120]
			{
				0,
				3,
				1,
				2,
				2,
				3,
				5,
				2,
				6,
				1,
				7,
				1,
				8,
				3,
				9,
				2,
				10,
				3,
				13,
				2,
				16,
				3,
				18,
				3,
				22,
				1,
				23,
				1,
				24,
				3,
				26,
				3,
				33,
				2,
				37,
				2,
				38,
				1,
				39,
				1,
				41,
				2,
				45,
				2,
				54,
				1,
				55,
				1,
				56,
				0,
				57,
				0,
				58,
				0,
				59,
				0,
				60,
				0,
				61,
				0,
				62,
				0,
				63,
				0,
				256,
				3,
				258,
				3,
				264,
				3,
				266,
				3,
				272,
				3,
				274,
				3,
				280,
				3,
				282,
				3,
				2049,
				2,
				2053,
				2,
				2057,
				2,
				2061,
				2,
				2081,
				2,
				2085,
				2,
				2089,
				2,
				2093,
				2,
				2304,
				9,
				2305,
				9,
				2312,
				9,
				2313,
				9,
				16390,
				1,
				16391,
				1,
				16406,
				1,
				16407,
				1,
				16422,
				1,
				16423,
				1,
				16438,
				1,
				16439,
				1,
				16642,
				8,
				16646,
				8,
				16658,
				8,
				16662,
				8,
				18437,
				6,
				18439,
				6,
				18469,
				6,
				18471,
				6,
				18688,
				9,
				18689,
				9,
				18690,
				8,
				18693,
				6,
				18694,
				8,
				18695,
				6,
				18696,
				9,
				18697,
				9,
				18706,
				8,
				18710,
				8,
				18725,
				6,
				18727,
				6,
				131128,
				0,
				131129,
				0,
				131130,
				0,
				131131,
				0,
				131132,
				0,
				131133,
				0,
				131134,
				0,
				131135,
				0,
				131352,
				7,
				131354,
				7,
				131384,
				7,
				131386,
				7,
				133161,
				5,
				133165,
				5,
				133177,
				5,
				133181,
				5,
				133376,
				9,
				133377,
				9,
				133384,
				9,
				133385,
				9,
				133400,
				7,
				133402,
				7,
				133417,
				5,
				133421,
				5,
				133432,
				7,
				133433,
				5,
				133434,
				7,
				133437,
				5,
				147510,
				4,
				147511,
				4,
				147518,
				4,
				147519,
				4,
				147714,
				8,
				147718,
				8,
				147730,
				8,
				147734,
				8,
				147736,
				7,
				147738,
				7,
				147766,
				4,
				147767,
				4,
				147768,
				7,
				147770,
				7,
				147774,
				4,
				147775,
				4,
				149509,
				6,
				149511,
				6,
				149541,
				6,
				149543,
				6,
				149545,
				5,
				149549,
				5,
				149558,
				4,
				149559,
				4,
				149561,
				5,
				149565,
				5,
				149566,
				4,
				149567,
				4,
				149760,
				9,
				149761,
				9,
				149762,
				8,
				149765,
				6,
				149766,
				8,
				149767,
				6,
				149768,
				9,
				149769,
				9,
				149778,
				8,
				149782,
				8,
				149784,
				7,
				149786,
				7,
				149797,
				6,
				149799,
				6,
				149801,
				5,
				149805,
				5,
				149814,
				4,
				149815,
				4,
				149816,
				7,
				149817,
				5,
				149818,
				7,
				149821,
				5,
				149822,
				4,
				149823,
				4,
				149824,
				37,
				149825,
				37,
				149826,
				36,
				149829,
				34,
				149830,
				36,
				149831,
				34,
				149832,
				37,
				149833,
				37,
				149842,
				36,
				149846,
				36,
				149848,
				35,
				149850,
				35,
				149861,
				34,
				149863,
				34,
				149865,
				33,
				149869,
				33,
				149878,
				32,
				149879,
				32,
				149880,
				35,
				149881,
				33,
				149882,
				35,
				149885,
				33,
				149886,
				32,
				149887,
				32,
				150080,
				49,
				150082,
				48,
				150088,
				49,
				150098,
				48,
				150104,
				47,
				150106,
				47,
				151873,
				46,
				151877,
				45,
				151881,
				46,
				151909,
				45,
				151913,
				44,
				151917,
				44,
				152128,
				49,
				152129,
				46,
				152136,
				49,
				152137,
				46,
				166214,
				43,
				166215,
				42,
				166230,
				43,
				166247,
				42,
				166262,
				41,
				166263,
				41,
				166466,
				48,
				166470,
				43,
				166482,
				48,
				166486,
				43,
				168261,
				45,
				168263,
				42,
				168293,
				45,
				168295,
				42,
				168512,
				31,
				168513,
				28,
				168514,
				31,
				168517,
				28,
				168518,
				25,
				168519,
				25,
				280952,
				40,
				280953,
				39,
				280954,
				40,
				280957,
				39,
				280958,
				38,
				280959,
				38,
				281176,
				47,
				281178,
				47,
				281208,
				40,
				281210,
				40,
				282985,
				44,
				282989,
				44,
				283001,
				39,
				283005,
				39,
				283208,
				30,
				283209,
				27,
				283224,
				30,
				283241,
				27,
				283256,
				22,
				283257,
				22,
				297334,
				41,
				297335,
				41,
				297342,
				38,
				297343,
				38,
				297554,
				29,
				297558,
				24,
				297562,
				29,
				297590,
				24,
				297594,
				21,
				297598,
				21,
				299365,
				26,
				299367,
				23,
				299373,
				26,
				299383,
				23,
				299389,
				20,
				299391,
				20,
				299584,
				31,
				299585,
				28,
				299586,
				31,
				299589,
				28,
				299590,
				25,
				299591,
				25,
				299592,
				30,
				299593,
				27,
				299602,
				29,
				299606,
				24,
				299608,
				30,
				299610,
				29,
				299621,
				26,
				299623,
				23,
				299625,
				27,
				299629,
				26,
				299638,
				24,
				299639,
				23,
				299640,
				22,
				299641,
				22,
				299642,
				21,
				299645,
				20,
				299646,
				21,
				299647,
				20,
				299648,
				61,
				299649,
				60,
				299650,
				61,
				299653,
				60,
				299654,
				59,
				299655,
				59,
				299656,
				58,
				299657,
				57,
				299666,
				55,
				299670,
				54,
				299672,
				58,
				299674,
				55,
				299685,
				52,
				299687,
				51,
				299689,
				57,
				299693,
				52,
				299702,
				54,
				299703,
				51,
				299704,
				56,
				299705,
				56,
				299706,
				53,
				299709,
				50,
				299710,
				53,
				299711,
				50,
				299904,
				61,
				299906,
				61,
				299912,
				58,
				299922,
				55,
				299928,
				58,
				299930,
				55,
				301697,
				60,
				301701,
				60,
				301705,
				57,
				301733,
				52,
				301737,
				57,
				301741,
				52,
				301952,
				79,
				301953,
				79,
				301960,
				76,
				301961,
				76,
				316038,
				59,
				316039,
				59,
				316054,
				54,
				316071,
				51,
				316086,
				54,
				316087,
				51,
				316290,
				78,
				316294,
				78,
				316306,
				73,
				316310,
				73,
				318085,
				77,
				318087,
				77,
				318117,
				70,
				318119,
				70,
				318336,
				79,
				318337,
				79,
				318338,
				78,
				318341,
				77,
				318342,
				78,
				318343,
				77,
				430776,
				56,
				430777,
				56,
				430778,
				53,
				430781,
				50,
				430782,
				53,
				430783,
				50,
				431000,
				75,
				431002,
				72,
				431032,
				75,
				431034,
				72,
				432809,
				74,
				432813,
				69,
				432825,
				74,
				432829,
				69,
				433032,
				76,
				433033,
				76,
				433048,
				75,
				433065,
				74,
				433080,
				75,
				433081,
				74,
				447158,
				71,
				447159,
				68,
				447166,
				71,
				447167,
				68,
				447378,
				73,
				447382,
				73,
				447386,
				72,
				447414,
				71,
				447418,
				72,
				447422,
				71,
				449189,
				70,
				449191,
				70,
				449197,
				69,
				449207,
				68,
				449213,
				69,
				449215,
				68,
				449408,
				67,
				449409,
				67,
				449410,
				66,
				449413,
				64,
				449414,
				66,
				449415,
				64,
				449416,
				67,
				449417,
				67,
				449426,
				66,
				449430,
				66,
				449432,
				65,
				449434,
				65,
				449445,
				64,
				449447,
				64,
				449449,
				63,
				449453,
				63,
				449462,
				62,
				449463,
				62,
				449464,
				65,
				449465,
				63,
				449466,
				65,
				449469,
				63,
				449470,
				62,
				449471,
				62,
				449472,
				19,
				449473,
				19,
				449474,
				18,
				449477,
				16,
				449478,
				18,
				449479,
				16,
				449480,
				19,
				449481,
				19,
				449490,
				18,
				449494,
				18,
				449496,
				17,
				449498,
				17,
				449509,
				16,
				449511,
				16,
				449513,
				15,
				449517,
				15,
				449526,
				14,
				449527,
				14,
				449528,
				17,
				449529,
				15,
				449530,
				17,
				449533,
				15,
				449534,
				14,
				449535,
				14,
				449728,
				19,
				449729,
				19,
				449730,
				18,
				449734,
				18,
				449736,
				19,
				449737,
				19,
				449746,
				18,
				449750,
				18,
				449752,
				17,
				449754,
				17,
				449784,
				17,
				449786,
				17,
				451520,
				19,
				451521,
				19,
				451525,
				16,
				451527,
				16,
				451528,
				19,
				451529,
				19,
				451557,
				16,
				451559,
				16,
				451561,
				15,
				451565,
				15,
				451577,
				15,
				451581,
				15,
				451776,
				19,
				451777,
				19,
				451784,
				19,
				451785,
				19,
				465858,
				18,
				465861,
				16,
				465862,
				18,
				465863,
				16,
				465874,
				18,
				465878,
				18,
				465893,
				16,
				465895,
				16,
				465910,
				14,
				465911,
				14,
				465918,
				14,
				465919,
				14,
				466114,
				18,
				466118,
				18,
				466130,
				18,
				466134,
				18,
				467909,
				16,
				467911,
				16,
				467941,
				16,
				467943,
				16,
				468160,
				13,
				468161,
				13,
				468162,
				13,
				468163,
				13,
				468164,
				13,
				468165,
				13,
				468166,
				13,
				468167,
				13,
				580568,
				17,
				580570,
				17,
				580585,
				15,
				580589,
				15,
				580598,
				14,
				580599,
				14,
				580600,
				17,
				580601,
				15,
				580602,
				17,
				580605,
				15,
				580606,
				14,
				580607,
				14,
				580824,
				17,
				580826,
				17,
				580856,
				17,
				580858,
				17,
				582633,
				15,
				582637,
				15,
				582649,
				15,
				582653,
				15,
				582856,
				12,
				582857,
				12,
				582872,
				12,
				582873,
				12,
				582888,
				12,
				582889,
				12,
				582904,
				12,
				582905,
				12,
				596982,
				14,
				596983,
				14,
				596990,
				14,
				596991,
				14,
				597202,
				11,
				597206,
				11,
				597210,
				11,
				597214,
				11,
				597234,
				11,
				597238,
				11,
				597242,
				11,
				597246,
				11,
				599013,
				10,
				599015,
				10,
				599021,
				10,
				599023,
				10,
				599029,
				10,
				599031,
				10,
				599037,
				10,
				599039,
				10,
				599232,
				13,
				599233,
				13,
				599234,
				13,
				599235,
				13,
				599236,
				13,
				599237,
				13,
				599238,
				13,
				599239,
				13,
				599240,
				12,
				599241,
				12,
				599250,
				11,
				599254,
				11,
				599256,
				12,
				599257,
				12,
				599258,
				11,
				599262,
				11,
				599269,
				10,
				599271,
				10,
				599272,
				12,
				599273,
				12,
				599277,
				10,
				599279,
				10,
				599282,
				11,
				599285,
				10,
				599286,
				11,
				599287,
				10,
				599288,
				12,
				599289,
				12,
				599290,
				11,
				599293,
				10,
				599294,
				11,
				599295,
				10
			};
			Contribution4[] array14 = new Contribution4[array12.Length / 16];
			for (int num = 0; num < array12.Length; num += 16)
			{
				int[] array15 = array11[array12[num]];
				Contribution4 contribution5 = null;
				Contribution4 contribution6 = null;
				for (int num2 = 0; num2 < array15.Length; num2 += 5)
				{
					contribution6 = new Contribution4(array15[num2], array15[num2 + 1], array15[num2 + 2], array15[num2 + 3], array15[num2 + 4]);
					if (contribution5 == null)
					{
						array14[num / 16] = contribution6;
					}
					else
					{
						contribution5.Next = contribution6;
					}
					contribution5 = contribution6;
				}
				contribution6.Next = new Contribution4(array12[num + 1], array12[num + 2], array12[num + 3], array12[num + 4], array12[num + 5]);
				contribution6.Next.Next = new Contribution4(array12[num + 6], array12[num + 7], array12[num + 8], array12[num + 9], array12[num + 10]);
				contribution6.Next.Next.Next = new Contribution4(array12[num + 11], array12[num + 12], array12[num + 13], array12[num + 14], array12[num + 15]);
			}
			lookup4D = new Contribution4[1048576];
			for (int num3 = 0; num3 < array13.Length; num3 += 2)
			{
				lookup4D[array13[num3]] = array14[array13[num3 + 1]];
			}
		}

		public OpenSimplexNoise()
			: this(DateTime.Now.Ticks)
		{
		}

		public OpenSimplexNoise(long seed)
		{
			perm = new byte[256];
			perm2D = new byte[256];
			perm3D = new byte[256];
			perm4D = new byte[256];
			byte[] array = new byte[256];
			for (int i = 0; i < 256; i++)
			{
				array[i] = (byte)i;
			}
			seed = seed * 6364136223846793005L + 1442695040888963407L;
			seed = seed * 6364136223846793005L + 1442695040888963407L;
			seed = seed * 6364136223846793005L + 1442695040888963407L;
			for (int num = 255; num >= 0; num--)
			{
				seed = seed * 6364136223846793005L + 1442695040888963407L;
				int num2 = (int)((seed + 31) % (num + 1));
				if (num2 < 0)
				{
					num2 += num + 1;
				}
				perm[num] = array[num2];
				perm2D[num] = (byte)(perm[num] & 0xE);
				perm3D[num] = (byte)((int)perm[num] % 24 * 3);
				perm4D[num] = (byte)(perm[num] & 0xFC);
				array[num2] = array[num];
			}
		}

		private static int FastFloor(double x)
		{
			int num = (int)x;
			return (!(x < (double)num)) ? num : (num - 1);
		}

		public double Evaluate(double x, double y)
		{
			double num = (x + y) * -0.211324865405187;
			double num2 = x + num;
			double num3 = y + num;
			int num4 = FastFloor(num2);
			int num5 = FastFloor(num3);
			double num6 = (double)(num4 + num5) * 0.366025403784439;
			double num7 = x - ((double)num4 + num6);
			double num8 = y - ((double)num5 + num6);
			double num9 = num2 - (double)num4;
			double num10 = num3 - (double)num5;
			double num11 = num9 + num10;
			int num12 = (int)(num9 - num10 + 1.0) | ((int)num11 << 1) | ((int)(num11 + num10) << 2) | ((int)(num11 + num9) << 4);
			Contribution2 contribution = lookup2D[num12];
			double num13 = 0.0;
			while (contribution != null)
			{
				double num14 = num7 + contribution.dx;
				double num15 = num8 + contribution.dy;
				double num16 = 2.0 - num14 * num14 - num15 * num15;
				if (num16 > 0.0)
				{
					int num17 = num4 + contribution.xsb;
					int num18 = num5 + contribution.ysb;
					byte b = perm2D[(perm[num17 & 0xFF] + num18) & 0xFF];
					double num19 = gradients2D[b] * num14 + gradients2D[b + 1] * num15;
					num16 *= num16;
					num13 += num16 * num16 * num19;
				}
				contribution = contribution.Next;
			}
			return num13 * 0.021276595744680851;
		}

		public double Evaluate(double x, double y, double z)
		{
			double num = (x + y + z) * -0.16666666666666666;
			double num2 = x + num;
			double num3 = y + num;
			double num4 = z + num;
			int num5 = FastFloor(num2);
			int num6 = FastFloor(num3);
			int num7 = FastFloor(num4);
			double num8 = (double)(num5 + num6 + num7) * 0.33333333333333331;
			double num9 = x - ((double)num5 + num8);
			double num10 = y - ((double)num6 + num8);
			double num11 = z - ((double)num7 + num8);
			double num12 = num2 - (double)num5;
			double num13 = num3 - (double)num6;
			double num14 = num4 - (double)num7;
			double num15 = num12 + num13 + num14;
			int num16 = (int)(num13 - num14 + 1.0) | ((int)(num12 - num13 + 1.0) << 1) | ((int)(num12 - num14 + 1.0) << 2) | ((int)num15 << 3) | ((int)(num15 + num14) << 5) | ((int)(num15 + num13) << 7) | ((int)(num15 + num12) << 9);
			Contribution3 contribution = lookup3D[num16];
			double num17 = 0.0;
			while (contribution != null)
			{
				double num18 = num9 + contribution.dx;
				double num19 = num10 + contribution.dy;
				double num20 = num11 + contribution.dz;
				double num21 = 2.0 - num18 * num18 - num19 * num19 - num20 * num20;
				if (num21 > 0.0)
				{
					int num22 = num5 + contribution.xsb;
					int num23 = num6 + contribution.ysb;
					int num24 = num7 + contribution.zsb;
					byte b = perm3D[(perm[(perm[num22 & 0xFF] + num23) & 0xFF] + num24) & 0xFF];
					double num25 = gradients3D[b] * num18 + gradients3D[b + 1] * num19 + gradients3D[b + 2] * num20;
					num21 *= num21;
					num17 += num21 * num21 * num25;
				}
				contribution = contribution.Next;
			}
			return num17 * 0.0097087378640776691;
		}

		public double Evaluate(double x, double y, double z, double w)
		{
			double num = (x + y + z + w) * -0.138196601125011;
			double num2 = x + num;
			double num3 = y + num;
			double num4 = z + num;
			double num5 = w + num;
			int num6 = FastFloor(num2);
			int num7 = FastFloor(num3);
			int num8 = FastFloor(num4);
			int num9 = FastFloor(num5);
			double num10 = (double)(num6 + num7 + num8 + num9) * 0.309016994374947;
			double num11 = x - ((double)num6 + num10);
			double num12 = y - ((double)num7 + num10);
			double num13 = z - ((double)num8 + num10);
			double num14 = w - ((double)num9 + num10);
			double num15 = num2 - (double)num6;
			double num16 = num3 - (double)num7;
			double num17 = num4 - (double)num8;
			double num18 = num5 - (double)num9;
			double num19 = num15 + num16 + num17 + num18;
			int num20 = (int)(num17 - num18 + 1.0) | ((int)(num16 - num17 + 1.0) << 1) | ((int)(num16 - num18 + 1.0) << 2) | ((int)(num15 - num16 + 1.0) << 3) | ((int)(num15 - num17 + 1.0) << 4) | ((int)(num15 - num18 + 1.0) << 5) | ((int)num19 << 6) | ((int)(num19 + num18) << 8) | ((int)(num19 + num17) << 11) | ((int)(num19 + num16) << 14) | ((int)(num19 + num15) << 17);
			Contribution4 contribution = lookup4D[num20];
			double num21 = 0.0;
			while (contribution != null)
			{
				double num22 = num11 + contribution.dx;
				double num23 = num12 + contribution.dy;
				double num24 = num13 + contribution.dz;
				double num25 = num14 + contribution.dw;
				double num26 = 2.0 - num22 * num22 - num23 * num23 - num24 * num24 - num25 * num25;
				if (num26 > 0.0)
				{
					int num27 = num6 + contribution.xsb;
					int num28 = num7 + contribution.ysb;
					int num29 = num8 + contribution.zsb;
					int num30 = num9 + contribution.wsb;
					byte b = perm4D[(perm[(perm[(perm[num27 & 0xFF] + num28) & 0xFF] + num29) & 0xFF] + num30) & 0xFF];
					double num31 = gradients4D[b] * num22 + gradients4D[b + 1] * num23 + gradients4D[b + 2] * num24 + gradients4D[b + 3] * num25;
					num26 *= num26;
					num21 += num26 * num26 * num31;
				}
				contribution = contribution.Next;
			}
			return num21 * 0.033333333333333333;
		}
	}
}
